name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Install Docker Compose V2 plugin (so we can use `docker compose â€¦`)
      - name: Install Docker Compose V2
        run: |
          mkdir -p ~/.docker/cli-plugins
          curl -sSL \
            https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64 \
            -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      # Generate a minimal .env.dev
      - name: Create .env.dev
        run: |
          cat > .env.dev <<EOF
          FLASK_APP=project/__init__.py
          FLASK_DEBUG=1
          DATABASE_URL=postgresql://hello_flask:hello_flask@db:5432/hello_flask_dev
          SQL_HOST=db
          SQL_PORT=5432
          DATABASE=postgres
          APP_FOLDER=/usr/src/app
          EOF

      # Build & start only db+web
      - name: Build & start services
        run: |
          docker compose build web
          docker compose up -d db web
          # wait for postgres init scripts & for web to be healthy
          sleep 20
          docker compose ps

      # Seed a simple test table
      - name: Seed test data
        run: |
          docker compose exec -T db psql \
            -U hello_flask \
            -d hello_flask_dev \
            -c "CREATE TABLE IF NOT EXISTS test (id INT PRIMARY KEY, name TEXT);
                INSERT INTO test VALUES (1,'Alice'),(2,'Bob');"

      # Verify that it got 2 rows
      - name: Verify test data
        run: |
          docker compose exec -T db psql \
            -U hello_flask \
            -d hello_flask_dev \
            -t -A \
            -c "SELECT COUNT(*) FROM test;" \
          | grep -q "^2$"

      # Quick check that your Flask app is responding
      - name: Smoke test web
        run: |
          curl --fail http://localhost:2233/ || (echo 'Web failed' && exit 1)

      # Tear everything down (including volumes)
      - name: Tear down
        if: always()
        run: docker compose down --volumes --remove-orphans
